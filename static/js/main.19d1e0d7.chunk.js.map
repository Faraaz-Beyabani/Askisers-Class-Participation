{"version":3,"sources":["Components/QuestionPreview.js","App.js","serviceWorker.js","index.js"],"names":["QuestionPreview","console","log","this","props","question","react_default","a","createElement","Card_default","CardHeader_default","id","avatar","Avatar_default","rounded","QuestionAnswer_default","action","index_es","icons_index_es","title","subheader","component","children","desc","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleOpen","setState","addQuestion","handleClose","newQ","state","newQuestion","newDesc","upvotes","questions","push","setNewQuestion","e","target","value","setNewDesc","generateQuestions","questionArr","sidebar","i","length","currQuestion","className","key","onClick","viewQuestion","currKey","previewQuestion","activeQuestion","activeDesc","questionInfo","fullScreen","Dialog_default","open","onClose","aria-labelledby","DialogTitle_default","DialogContent_default","DialogContentText_default","TextField_default","onChange","label","style","margin","width","placeholder","helperText","fullWidth","InputLabelProps","shrink","DialogActions_default","Button_default","variant","color","type","Components_QuestionPreview","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kyBAyCeA,mLA1BX,OADAC,QAAQC,IAAI,aAAeC,KAAKC,MAAMC,UAEpCC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,KACED,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CACEI,GAAG,aACHC,OACEN,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAQO,SAAO,GACZ,IACDR,EAAAC,EAAAC,cAACO,EAAAR,EAAD,MAAmB,KAGvBS,OACEV,EAAAC,EAAAC,cAACS,EAAA,EAAD,KACEX,EAAAC,EAAAC,cAACU,EAAA,EAAD,OAGJC,MAAOhB,KAAKC,MAAMC,SAClBe,UAAW,IAEbd,EAAAC,EAAAC,cAACS,EAAA,EAAD,KACEX,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAYI,UAAU,IAAIC,SAAUnB,KAAKC,MAAMmB,gBAtB3BC,6ICoLfC,cA/Kb,SAAAA,EAAYrB,GAAO,IAAAsB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAxB,KAAAsB,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAxB,KAAAwB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAA5B,KAAMC,KAYR4B,WAAa,WACXN,EAAKO,SAAS,CAAEC,aAAa,KAdZR,EAiBnBS,YAAc,WACZ,IAAIC,EAAO,CACT,CACE/B,SAAUqB,EAAKW,MAAMC,YACrBf,KAAMG,EAAKW,MAAME,QACjBC,QAAS,IAGbvC,QAAQC,IAAI,sBAAwBkC,EAAK,GAAL,UACpCV,EAAKO,SAAS,CACZQ,UAAWf,EAAKW,MAAMI,UAAUC,KAAKN,EAAK,IAC1CF,aAAa,IAEfjC,QAAQC,IAAI,yBAA2BwB,EAAKW,MAAMI,YA9BjCf,EAiCnBiB,eAAiB,SAAAC,GACflB,EAAKO,SAAS,CACZK,YAAaM,EAAEC,OAAOC,QAExB7C,QAAQC,IAAI,uBAAyBwB,EAAKW,MAAMC,cArC/BZ,EAwCnBqB,WAAa,SAAAH,GACXlB,EAAKO,SAAS,CACZM,QAASK,EAAEC,OAAOC,QAEpB7C,QAAQC,IAAI,uBAAyBwB,EAAKW,MAAME,UA5C/Bb,EAiDnBsB,kBAAoB,WAKlB,IAJA,IAAMC,EAAcvB,EAAKW,MAAMI,UAC3BS,EAAU,GAGLC,EAAI,EAAGA,EAAIF,EAAYG,OAAQD,IAAK,CAC3C,IAAIE,EAAeJ,EAAYE,GAE/BD,EAAQR,KACNpC,EAAAC,EAAAC,cAAA,OAAK8C,UAAU,WAAWC,IAAKJ,EAAGK,QAAS9B,EAAK+B,cAC9CnD,EAAAC,EAAAC,cAAA,OAAK8C,UAAU,OACbhD,EAAAC,EAAAC,cAAA,OAAK8C,UAAU,WACbhD,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAYqC,UAAU,UACpBhD,EAAAC,EAAAC,cAACU,EAAA,EAAD,OAEFZ,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAI6C,EAAY,UAElB/C,EAAAC,EAAAC,cAAA,OAAKG,GAAG,gBAAgB2C,UAAU,WAC/BD,EAAY,aAMvB,OAAOH,GA1EUxB,EA6EnB+B,aAAe,SAAAb,GACb,IAAIc,EAAUd,EAAEC,OAAOU,IACvBtD,QAAQC,IAAI,WAAawD,GACzBhC,EAAKO,SAAS,CACZ0B,iBAAkBjC,EAAKW,MAAMsB,gBAC7BC,eAAgBlC,EAAKW,MAAMI,UAAUiB,GAArB,SAChBG,WAAYnC,EAAKW,MAAMI,UAAUiB,GAArB,QAjFdhC,EAAKW,MAAQ,CACXsB,iBAAiB,EACjBlB,UAAWqB,EACXF,eACE,2EACFC,WAAY,oCAEZ3B,aAAa,GATER,wEAuFV,IACCqC,EAAe5D,KAAKC,MAApB2D,WAER,OACEzD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACwD,EAAAzD,EAAD,CACEwD,WAAYA,EACZE,KAAM9D,KAAKkC,MAAMH,YACjBgC,QAAS/D,KAAKgC,YACdgC,kBAAgB,2BAEhB7D,EAAAC,EAAAC,cAAC4D,EAAA7D,EAAD,CAAaI,GAAG,2BACb,qBAEHL,EAAAC,EAAAC,cAAC6D,EAAA9D,EAAD,KACED,EAAAC,EAAAC,cAAC8D,EAAA/D,EAAD,KACED,EAAAC,EAAAC,cAAC+D,EAAAhE,EAAD,CACEiE,SAAUrE,KAAKwC,eACfhC,GAAG,sBACH8D,MAAM,6BACNC,MAAO,CAAEC,OAAQ,EAAGC,MAAO,KAC3BC,YAAY,GACZC,WAAW,GACXC,WAAS,EACTJ,OAAO,SACPK,gBAAiB,CACfC,QAAQ,KAET,KAEL3E,EAAAC,EAAAC,cAAC8D,EAAA/D,EAAD,KACED,EAAAC,EAAAC,cAAC+D,EAAAhE,EAAD,CACEiE,SAAUrE,KAAK4C,WACfpC,GAAG,sBACH8D,MAAM,sCACNC,MAAO,CAAEC,OAAQ,EAAGC,MAAO,KAC3BC,YAAY,GACZC,WAAW,GACXC,WAAS,EACTJ,OAAO,SACPK,gBAAiB,CACfC,QAAQ,KAET,MAGP3E,EAAAC,EAAAC,cAAC0E,EAAA3E,EAAD,KACED,EAAAC,EAAAC,cAAC2E,EAAA5E,EAAD,CACEiD,QAASrD,KAAKgC,YACdiD,QAAQ,YACRC,MAAM,WAHR,UAUJ/E,EAAAC,EAAAC,cAAA,OAAKG,GAAG,eAAe2C,UAAU,mBAC/BhD,EAAAC,EAAAC,cAAA,OAAK8C,UAAU,UACbhD,EAAAC,EAAAC,cAAA,SAAO8E,KAAK,OAAOT,YAAY,+BAC/BvE,EAAAC,EAAAC,cAACS,EAAA,EAAD,KACEX,EAAAC,EAAAC,cAACU,EAAA,EAAD,QAGJZ,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAC2E,EAAA5E,EAAD,CACEiD,QAASrD,KAAK6B,WACdoD,QAAQ,YACRC,MAAM,WAHR,sBAQF/E,EAAAC,EAAAC,cAAA,WACCL,KAAK6C,qBAER1C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC+E,EAAD,CACElF,SAAUF,KAAKkC,MAAMuB,eACrBrC,KAAMpB,KAAKkC,MAAMwB,sBAxKXrC,aCJEgE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxF,EAAAC,EAAAC,cAACuF,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.19d1e0d7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"../QuestionPreview.css\";\n\nimport QuestionAnswer from \"@material-ui/icons/QuestionAnswer\";\n\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport Avatar from \"@material-ui/core/Avatar\";\n\nimport { IconButton, CardContent, Typography } from \"@material-ui/core\";\nimport { Add } from \"@material-ui/icons\";\n\nclass QuestionPreview extends Component {\n  render() {\n    console.log(\"Question: \" + this.props.question);\n    return (\n      <Card>\n        <CardHeader\n          id=\"cardHeader\"\n          avatar={\n            <Avatar rounded>\n              {\" \"}\n              <QuestionAnswer />{\" \"}\n            </Avatar>\n          }\n          action={\n            <IconButton>\n              <Add/>\n            </IconButton>\n          }\n          title={this.props.question}\n          subheader={0}\n        />\n        <CardContent>\n          <Typography component=\"p\" children={this.props.desc}/>\n        </CardContent>\n      </Card>\n    );\n  }\n}\n\nexport default QuestionPreview;\n","import React, { Component } from \"react\";\nimport { IconButton } from \"@material-ui/core\";\nimport { Search, Add } from \"@material-ui/icons\";\nimport \"./App.css\";\nimport \"./SideBar.css\";\nimport QuestionPreview from \"./Components/QuestionPreview\";\nimport questionInfo from \"./Components/QuestionData.json\";\nimport Button from \"@material-ui/core/Button\";\n\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport TextField from \"@material-ui/core/TextField\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      previewQuestion: false,\n      questions: questionInfo,\n      activeQuestion:\n        \"You haven't selected a post yet! Click on one in the sidebar to view it.\",\n      activeDesc: \"By the way, you look great today!\",\n      // State of whether the answer question modal is open or not\n      addQuestion: false\n    };\n  }\n\n  handleOpen = () => {\n    this.setState({ addQuestion: true });\n  };\n\n  handleClose = () => {\n    let newQ = [\n      {\n        question: this.state.newQuestion,\n        desc: this.state.newDesc,\n        upvotes: 0\n      }\n    ];\n    console.log(\"ADD THIS QUESTION: \" + newQ[0][\"question\"]);\n    this.setState({\n      questions: this.state.questions.push(newQ[0]),\n      addQuestion: false\n    });\n    console.log(\"New set of questions: \" + this.state.questions);\n  };\n\n  setNewQuestion = e => {\n    this.setState({\n      newQuestion: e.target.value\n    });\n    console.log(\"new value of state: \" + this.state.newQuestion);\n  };\n\n  setNewDesc = e => {\n    this.setState({\n      newDesc: e.target.value\n    });\n    console.log(\"new value of state: \" + this.state.newDesc);\n  };\n\n  // Generates all of the question previews from the array\n  // of questions in the state\n  generateQuestions = () => {\n    const questionArr = this.state.questions;\n    let sidebar = [];\n\n    // Outer loop to create parent\n    for (let i = 0; i < questionArr.length; i++) {\n      let currQuestion = questionArr[i];\n      //Create the parent and add the children\n      sidebar.push(\n        <div className=\"question\" key={i} onClick={this.viewQuestion}>\n          <div className=\"row\">\n            <div className=\"columnA\">\n              <IconButton className=\"upvote\">\n                <Add />\n              </IconButton>\n              <br />\n              <p>{currQuestion[\"upvotes\"]}</p>\n            </div>\n            <div id=\"main-question\" className=\"columnB\">\n              {currQuestion[\"question\"]}\n            </div>\n          </div>\n        </div>\n      );\n    }\n    return sidebar;\n  };\n\n  viewQuestion = e => {\n    let currKey = e.target.key;\n    console.log(\"currkey \" + currKey);\n    this.setState({\n      previewQuestion: !this.state.previewQuestion,\n      activeQuestion: this.state.questions[currKey][\"question\"],\n      activeDesc: this.state.questions[currKey][\"desc\"]\n    });\n  };\n\n  render() {\n    const { fullScreen } = this.props;\n\n    return (\n      <div>\n        <Dialog\n          fullScreen={fullScreen}\n          open={this.state.addQuestion}\n          onClose={this.handleClose}\n          aria-labelledby=\"responsive-dialog-title\"\n        >\n          <DialogTitle id=\"responsive-dialog-title\">\n            {\"Create a new post\"}\n          </DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              <TextField\n                onChange={this.setNewQuestion}\n                id=\"standard-full-width\"\n                label=\"Enter your question below:\"\n                style={{ margin: 8, width: 500 }}\n                placeholder=\"\"\n                helperText=\"\"\n                fullWidth\n                margin=\"normal\"\n                InputLabelProps={{\n                  shrink: true\n                }}\n              />{\" \"}\n            </DialogContentText>\n            <DialogContentText>\n              <TextField\n                onChange={this.setNewDesc}\n                id=\"standard-full-width\"\n                label=\"Enter a detailed description below:\"\n                style={{ margin: 8, width: 500 }}\n                placeholder=\"\"\n                helperText=\"\"\n                fullWidth\n                margin=\"normal\"\n                InputLabelProps={{\n                  shrink: true\n                }}\n              />{\" \"}\n            </DialogContentText>\n          </DialogContent>\n          <DialogActions>\n            <Button\n              onClick={this.handleClose}\n              variant=\"contained\"\n              color=\"primary\"\n            >\n              Done\n            </Button>\n          </DialogActions>\n        </Dialog>\n\n        <div id=\"sidebarsteve\" className=\"Sidebar-Wrapper\">\n          <div className=\"topnav\">\n            <input type=\"text\" placeholder=\"Find a question or topic..\" />\n            <IconButton>\n              <Search />\n            </IconButton>\n          </div>\n          <br />\n          <center>\n            <Button\n              onClick={this.handleOpen}\n              variant=\"contained\"\n              color=\"primary\"\n            >\n              Create a new post\n            </Button>\n          </center>\n          <br />\n          {this.generateQuestions()}\n        </div>\n        <div>\n          <QuestionPreview\n            question={this.state.activeQuestion}\n            desc={this.state.activeDesc}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}