{"version":3,"sources":["Components/QuestionPreview.js","App.js","serviceWorker.js","index.js"],"names":["QuestionPreview","console","log","this","props","question","react_default","a","createElement","Card_default","CardHeader_default","id","avatar","Avatar_default","rounded","QuestionAnswer_default","title","subheader","votes","index_es","component","children","desc","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleOpen","setState","addQuestion","handleClose","newQ","state","newQuestion","newDesc","upvotes","questions","concat","setNewQuestion","e","target","value","setNewDesc","setUpvotes","newUpvotes","Upvotes","generateQuestions","questionArr","sidebar","i","length","currQuestion","push","className","icons_index_es","onClick","viewQuestion","currIndex","getAttribute","currKey","previewQuestion","activeQuestion","activeDesc","activeUpvotes","questionInfo","fullScreen","Dialog_default","open","onClose","aria-labelledby","DialogTitle_default","DialogContent_default","DialogContentText_default","TextField_default","onChange","label","style","margin","width","placeholder","helperText","fullWidth","InputLabelProps","shrink","DialogActions_default","Button_default","variant","color","type","Components_QuestionPreview","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4a6fc8aa.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"../QuestionPreview.css\";\n\nimport QuestionAnswer from \"@material-ui/icons/QuestionAnswer\";\n\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport Avatar from \"@material-ui/core/Avatar\";\n\nimport { CardContent, Typography } from \"@material-ui/core\";\n\nclass QuestionPreview extends Component {\n  render() {\n    console.log(\"Question: \" + this.props.question);\n    return (\n      <Card>\n        <CardHeader\n          id=\"cardHeader\"\n          avatar={\n            <Avatar rounded>\n              {\" \"}\n              <QuestionAnswer />{\" \"}\n            </Avatar>\n          }\n          title={this.props.question}\n          subheader={this.props.votes}\n        />\n        <CardContent>\n          <Typography component=\"p\" children={this.props.desc}/>\n        </CardContent>\n      </Card>\n    );\n  }\n}\n\nexport default QuestionPreview;\n","import React, { Component } from \"react\";\nimport { IconButton } from \"@material-ui/core\";\nimport { Search, Add } from \"@material-ui/icons\";\nimport \"./App.css\";\nimport \"./SideBar.css\";\nimport QuestionPreview from \"./Components/QuestionPreview\";\nimport questionInfo from \"./Components/QuestionData.json\";\nimport Button from \"@material-ui/core/Button\";\n\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport TextField from \"@material-ui/core/TextField\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currKey: 0,\n      previewQuestion: false,\n      questions: questionInfo,\n      activeQuestion:\n        \"You haven't selected a post yet! Click on one in the sidebar to view it.\",\n      activeDesc:\n        \"By the way, you look great today!\",\n      activeUpvotes:\n        0,\n      // State of whether the answer question modal is open or not\n      addQuestion: false\n    };\n  }\n\n  handleOpen = () => {\n    this.setState({ addQuestion: true });\n  };\n\n  handleClose = () => {\n    let newQ = [\n      {\n        question: this.state.newQuestion,\n        desc: this.state.newDesc,\n        upvotes: 0\n      }\n    ];\n    this.setState({\n      questions: this.state.questions.concat(newQ),\n      addQuestion: false\n    });\n    console.log(\"New set of questions: \" + this.state.questions);\n  };\n\n  setNewQuestion = e => {\n    this.setState({\n      newQuestion: e.target.value\n    });\n    console.log(\"new value of state: \" + this.state.newQuestion);\n  };\n\n  setNewDesc = e => {\n    this.setState({\n      newDesc: e.target.value\n    });\n    console.log(\"new value of state: \" + this.state.newDesc);\n  };\n\n  setUpvotes = e => {\n    this.setState({\n      newUpvotes: e.target.value\n    });\n    console.log(\"new value of state: \" + this.state.Upvotes);\n  };\n\n  // Generates all of the question previews from the array\n  // of questions in the state\n  generateQuestions = () => {\n    const questionArr = this.state.questions;\n    console.log(\"QUESTION ARRAY: \" + questionArr[0][\"question\"]);\n    let sidebar = [];\n\n    // Outer loop to create parent\n    for (let i = 0; i < questionArr.length; i++) {\n      let currQuestion = questionArr[i];\n      //Create the parent and add the children\n      sidebar.push(\n        <div className=\"question\">\n          <div className=\"row\">\n            <div className=\"columnA\">\n              <IconButton className=\"upvote\">\n                <Add />\n              </IconButton>\n              <br />\n              <p>{currQuestion[\"upvotes\"]}</p>\n            </div>\n            <div id=\"main-question\" className=\"columnB\" value={i} onClick={this.viewQuestion}>\n              {currQuestion[\"question\"]}\n            </div>\n          </div>\n        </div>\n      );\n    }\n    return sidebar;\n  };\n\n  viewQuestion = e => {\n    var currIndex = e.target.getAttribute('value');\n    this.setState({\n      currKey: currIndex,\n      previewQuestion: !this.state.previewQuestion,\n      activeQuestion: this.state.questions[currIndex][\"question\"],\n      activeDesc: this.state.questions[currIndex][\"desc\"],\n      activeUpvotes: this.state.questions[currIndex][\"upvotes\"]\n    });\n  };\n\n  render() {\n    const { fullScreen } = this.props;\n\n    return (\n      <div>\n        <Dialog\n          fullScreen={fullScreen}\n          open={this.state.addQuestion}\n          onClose={this.handleClose}\n          aria-labelledby=\"responsive-dialog-title\"\n        >\n          <DialogTitle id=\"responsive-dialog-title\">\n            {\"Create a new post\"}\n          </DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              <TextField\n                onChange={this.setNewQuestion}\n                id=\"standard-full-width\"\n                label=\"Enter your question below:\"\n                style={{ margin: 8, width: 500 }}\n                placeholder=\"\"\n                helperText=\"\"\n                fullWidth\n                margin=\"normal\"\n                InputLabelProps={{\n                  shrink: true\n                }}\n              />{\" \"}\n            </DialogContentText>\n            <DialogContentText>\n              <TextField\n                onChange={this.setNewDesc}\n                id=\"standard-full-width\"\n                label=\"Enter a detailed description below:\"\n                style={{ margin: 8, width: 500 }}\n                placeholder=\"\"\n                helperText=\"\"\n                fullWidth\n                margin=\"normal\"\n                InputLabelProps={{\n                  shrink: true\n                }}\n              />{\" \"}\n            </DialogContentText>\n          </DialogContent>\n          <DialogActions>\n            <Button\n              onClick={this.handleClose}\n              variant=\"contained\"\n              color=\"primary\"\n            >\n              Done\n            </Button>\n          </DialogActions>\n        </Dialog>\n\n        <div id=\"sidebarsteve\" className=\"Sidebar-Wrapper\">\n          <div className=\"topnav\">\n            <input type=\"text\" placeholder=\"Find a question or topic..\" />\n            <IconButton>\n              <Search />\n            </IconButton>\n          </div>\n          <br />\n          <center>\n            <Button\n              onClick={this.handleOpen}\n              variant=\"contained\"\n              color=\"primary\"\n            >\n              Create a new post\n            </Button>\n          </center>\n          <br />\n          {this.generateQuestions()}\n        </div>\n        <div>\n          <QuestionPreview question={this.state.activeQuestion} votes={this.state.activeUpvotes} desc={this.state.activeDesc}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}