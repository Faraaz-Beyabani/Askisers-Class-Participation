{"version":3,"sources":["Components/QuestionPreview.js","Components/Logo.js","Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["QuestionPreview","console","log","this","props","question","react_default","a","createElement","Card_default","CardHeader_default","id","avatar","Avatar_default","rounded","QuestionAnswer_default","title","subheader","votes","index_es","component","children","desc","Component","Logo","sideList","className","Dashboard","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","drawerToggle","setState","drawerOpen","state","handleOpen","addQuestion","handleClose","newQ","newQuestion","newDesc","upvotes","questions","concat","setNewQuestion","e","target","value","setNewDesc","setUpvotes","newUpvotes","Upvotes","generateQuestions","questionArr","sidebar","i","length","currQuestion","push","icons_index_es","onClick","viewQuestion","currIndex","getAttribute","currKey","previewQuestion","activeQuestion","activeDesc","activeUpvotes","questionInfo","name","fullScreen","classes","Dialog_default","open","onClose","aria-labelledby","DialogTitle_default","DialogContent_default","DialogContentText_default","TextField_default","onChange","label","style","margin","width","placeholder","helperText","fullWidth","InputLabelProps","shrink","DialogActions_default","Button_default","variant","color","position","menuButton","Menu_default","Components_Logo","type","Components_QuestionPreview","withStyles","theme","SignUpHeader","FormCheckBox","htmlFor","App","openDashboard","activeScreen","updateName","username","password","App_SignUpHeader","App_FormCheckBox","src_Dashboard","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.009912b6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"../QuestionPreview.css\";\n\nimport QuestionAnswer from \"@material-ui/icons/QuestionAnswer\";\n\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport Avatar from \"@material-ui/core/Avatar\";\n\nimport { CardContent, Typography } from \"@material-ui/core\";\n\nclass QuestionPreview extends Component {\n  render() {\n    console.log(\"Question: \" + this.props.question);\n    return (\n      <Card>\n        <CardHeader\n          id=\"cardHeader\"\n          avatar={\n            <Avatar rounded>\n              {\" \"}\n              <QuestionAnswer />{\" \"}\n            </Avatar>\n          }\n          title={this.props.question}\n          subheader={this.props.votes}\n        />\n        <CardContent>\n          <Typography component=\"p\" children={this.props.desc}/>\n        </CardContent>\n      </Card>\n    );\n  }\n}\n\nexport default QuestionPreview;\n","import React, { Component } from \"react\";\nimport \"../Logo.css\";\n\nclass Logo extends Component {\n  render() {\n    return (\n      <div id=\"LogoHeader\">\n        <div id=\"LogoTitle\">Askisers</div>\n      </div>\n    );\n  }\n}\n\nexport default Logo;\n","import React, { Component } from \"react\";\nimport { IconButton, AppBar, Toolbar, Drawer } from \"@material-ui/core\";\nimport { Search, Add} from \"@material-ui/icons\";\nimport MenuIcon from '@material-ui/icons/Menu';\nimport \"./App.css\";\nimport \"./SideBar.css\";\nimport \"./Logo.css\"\n\nimport { withStyles } from '@material-ui/core/styles';\n\nimport QuestionPreview from \"./Components/QuestionPreview\";\nimport questionInfo from \"./Components/QuestionData.json\";\nimport Logo from \"./Components/Logo.js\"\n\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport TextField from \"@material-ui/core/TextField\";\n\nconst styles = theme => ({\n  menuButton: {\n    color: \"white\"\n  }\n})\n\nconst sideList = (\n  <div className=\"sideDrawer\">\n    <div className=\"userName\">Joe Schmoe</div>\n    <div className=\"className\">EECS 330</div>\n  </div>\n);\n\nclass Dashboard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currKey: 0,\n      previewQuestion: false,\n      questions: questionInfo,\n      activeQuestion:\n        \"Hi \" + this.props.name + \", click on a question in the sidebar to view it.\",\n      activeDesc: \"By the way, you look great today!\",\n      activeUpvotes: \"\",\n      // State of whether the answer question modal is open or not\n      addQuestion: false,\n      drawerOpen: false\n    };\n  }\n  \n  drawerToggle = () => {\n    this.setState({ drawerOpen: !this.state.drawerOpen });\n  };\n\n  handleOpen = () => {\n    this.setState({ addQuestion: true });\n  };\n\n  handleClose = () => {\n    let newQ = [\n      {\n        question: this.state.newQuestion,\n        desc: this.state.newDesc,\n        upvotes: 0\n      }\n    ];\n    this.setState({\n      questions: this.state.questions.concat(newQ),\n      addQuestion: false\n    });\n    console.log(\"New set of questions: \" + this.state.questions);\n  };\n\n  setNewQuestion = e => {\n    this.setState({\n      newQuestion: e.target.value\n    });\n    console.log(\"new value of state: \" + this.state.newQuestion);\n  };\n\n  setNewDesc = e => {\n    this.setState({\n      newDesc: e.target.value\n    });\n    console.log(\"new value of state: \" + this.state.newDesc);\n  };\n\n  setUpvotes = e => {\n    this.setState({\n      newUpvotes: e.target.value\n    });\n    console.log(\"new value of state: \" + this.state.Upvotes);\n  };\n\n  // Generates all of the question previews from the array\n  // of questions in the state\n  generateQuestions = () => {\n    const questionArr = this.state.questions;\n    console.log(\"QUESTION ARRAY: \" + questionArr[0][\"question\"]);\n    let sidebar = [];\n\n    // Outer loop to create parent\n    for (let i = 0; i < questionArr.length; i++) {\n      let currQuestion = questionArr[i];\n      //Create the parent and add the children\n      sidebar.push(\n        <div className=\"question\">\n          <div className=\"row\">\n            <div className=\"columnA\">\n              <IconButton className=\"upvote\">\n                <Add />\n              </IconButton>\n              <br />\n              <p>{currQuestion[\"upvotes\"]}</p>\n            </div>\n            <div\n              id=\"main-question\"\n              className=\"columnB\"\n              value={i}\n              onClick={this.viewQuestion}\n            >\n              {currQuestion[\"question\"]}\n            </div>\n          </div>\n        </div>\n      );\n    }\n    return sidebar;\n  };\n\n  viewQuestion = e => {\n    var currIndex = e.target.getAttribute(\"value\");\n    this.setState({\n      currKey: currIndex,\n      previewQuestion: !this.state.previewQuestion,\n      activeQuestion: this.state.questions[currIndex][\"question\"],\n      activeDesc: this.state.questions[currIndex][\"desc\"],\n      activeUpvotes: this.state.questions[currIndex][\"upvotes\"]\n    });\n  };\n\n  render() {\n    // console.log(\"NAME OF USER IS: \" + this.props.name);\n    const { fullScreen } = this.props;\n    const {classes} = this.props;\n\n    return (\n      <div>\n        <Dialog\n          fullScreen={fullScreen}\n          open={this.state.addQuestion}\n          onClose={this.handleClose}\n          aria-labelledby=\"responsive-dialog-title\"\n        >\n          <DialogTitle id=\"responsive-dialog-title\">\n            {\"Create a new post\"}\n          </DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              <TextField\n                onChange={this.setNewQuestion}\n                id=\"standard-full-width\"\n                label=\"Enter your question below:\"\n                style={{ margin: 8, width: 500 }}\n                placeholder=\"\"\n                helperText=\"\"\n                fullWidth\n                margin=\"normal\"\n                InputLabelProps={{\n                  shrink: true\n                }}\n              />{\" \"}\n            </DialogContentText>\n            <DialogContentText>\n              <TextField\n                onChange={this.setNewDesc}\n                id=\"standard-full-width\"\n                label=\"Enter a detailed description below:\"\n                style={{ margin: 8, width: 500 }}\n                placeholder=\"\"\n                helperText=\"\"\n                fullWidth\n                margin=\"normal\"\n                InputLabelProps={{\n                  shrink: true\n                }}\n              />{\" \"}\n            </DialogContentText>\n          </DialogContent>\n          <DialogActions>\n            <Button\n              onClick={this.handleClose}\n              variant=\"contained\"\n              color=\"primary\"\n            >\n              Done\n            </Button>\n          </DialogActions>\n        </Dialog>\n\n        <AppBar position=\"static\" color=\"primary\">\n          <Toolbar>\n            <IconButton onClick={this.drawerToggle} className={classes.menuButton}><MenuIcon/></IconButton>\n            <Logo/>\n          </Toolbar>\n        </AppBar>\n\n        <Drawer open={this.state.drawerOpen} onClose={this.drawerToggle}>{sideList}</Drawer>\n\n        <div id=\"sidebarsteve\" className=\"Sidebar-Wrapper\">\n          <div className=\"topnav\">\n            <input type=\"text\" placeholder=\"Find a question or topic..\" />\n            <IconButton>\n              <Search />\n            </IconButton>\n          </div>\n          <br />\n          <center>\n            <Button\n              onClick={this.handleOpen}\n              variant=\"contained\"\n              color=\"primary\"\n            >\n              Create a new post\n            </Button>\n          </center>\n          <br />\n          {this.generateQuestions()}\n        </div>\n        <div>\n          <QuestionPreview\n            question={this.state.activeQuestion}\n            votes={this.state.activeUpvotes}\n            desc={this.state.activeDesc}\n          />\n          <br/>\n          <center>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n            >\n              Answer this question\n            </Button>\n            </center>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(Dashboard);\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport \"./SideBar.css\";\n\n// import Login from \"./Login\";\nimport Dashboard from \"./Dashboard\";\n\nconst SignUpHeader = props => (\n  <div id=\"signUpHeader\">\n    <div id=\"signUpHeaderTitle\">Askisers</div>\n  </div>\n);\n\nconst FormCheckBox = props => (\n  <div className=\"signUpRow\">\n    <input id={props.id} type=\"checkbox\" />\n    <label htmlFor={props.id}>{props.label}</label>\n  </div>\n);\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: \"\",\n      username: \"\",\n      password: \"\",\n      activeScreen: \"Login\"\n    };\n  }\n\n  openDashboard = () => {\n    console.log(\"Head over to dashboard\");\n    this.setState({ activeScreen: \"Dashboard\" });\n  };\n\n  updateName = e => {\n    this.setState({ name: e.target.value });\n    console.log(\"New name: \" + this.state.name);\n  };\n\n  render() {\n    console.log(\"Current screen: \" + this.state.activeScreen);\n    const activeScreen = this.state.activeScreen;\n\n    return (\n      <div>\n        {activeScreen === \"Login\" ? (\n          <div>\n            <div id=\"signUpContainer\">\n              <div id=\"signUpHeader\">\n                <SignUpHeader />\n              </div>\n              <div className=\"signUpRow\">\n                <input\n                  onChange={this.updateName}\n                  type=\"text\"\n                  placeholder=\"First and last name\"\n                />\n              </div>\n              <div className=\"signUpRow\">\n                <input type=\"text\" placeholder=\"Username\" />\n              </div>\n              <div className=\"signUpRow\">\n                <input type=\"password\" placeholder=\"Password\" />\n              </div>\n              <FormCheckBox\n                id=\"terms\"\n                label=\"I agree to the terms and conditions\"\n              />\n            </div>{\" \"}\n            <center>\n              <button onClick={this.openDashboard} id=\"signUpButton\">\n                Sign up\n              </button>\n            </center>\n          </div>\n        ) : activeScreen === \"Dashboard\" ? (\n          <Dashboard name={this.state.name} />\n        ) : null}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}